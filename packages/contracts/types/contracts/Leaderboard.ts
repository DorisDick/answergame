/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Leaderboard {
  export type LeaderboardEntryStruct = {
    user: AddressLike;
    score: BigNumberish;
    correctAnswers: BigNumberish;
    totalAnswered: BigNumberish;
    totalReward: BigNumberish;
    rank: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    user: string,
    score: bigint,
    correctAnswers: bigint,
    totalAnswered: bigint,
    totalReward: bigint,
    rank: bigint
  ] & {
    user: string;
    score: bigint;
    correctAnswers: bigint;
    totalAnswered: bigint;
    totalReward: bigint;
    rank: bigint;
  };
}

export interface LeaderboardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addUserToLeaderboard"
      | "admin"
      | "answerGame"
      | "distributeRewards"
      | "getLeaderboard"
      | "getUserRank"
      | "lastUpdateTime"
      | "leaderboards"
      | "rankRewards"
      | "rewardPools"
      | "setRewardPool"
      | "sortLeaderboard"
      | "updateAdmin"
      | "updateLeaderboard"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LeaderboardUpdated" | "RewardsDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addUserToLeaderboard",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "answerGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRank",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rankRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLeaderboard",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addUserToLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "answerGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rankRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLeaderboard",
    data: BytesLike
  ): Result;
}

export namespace LeaderboardUpdatedEvent {
  export type InputTuple = [
    leaderboardType: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [leaderboardType: bigint, timestamp: bigint];
  export interface OutputObject {
    leaderboardType: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    leaderboardType: BigNumberish,
    winners: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    leaderboardType: bigint,
    winners: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    leaderboardType: bigint;
    winners: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Leaderboard extends BaseContract {
  connect(runner?: ContractRunner | null): Leaderboard;
  waitForDeployment(): Promise<this>;

  interface: LeaderboardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addUserToLeaderboard: TypedContractMethod<
    [leaderboardType: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  answerGame: TypedContractMethod<[], [string], "view">;

  distributeRewards: TypedContractMethod<
    [leaderboardType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getLeaderboard: TypedContractMethod<
    [leaderboardType: BigNumberish, offset: BigNumberish, limit: BigNumberish],
    [Leaderboard.LeaderboardEntryStructOutput[]],
    "view"
  >;

  getUserRank: TypedContractMethod<
    [leaderboardType: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  lastUpdateTime: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  leaderboards: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        user: string;
        score: bigint;
        correctAnswers: bigint;
        totalAnswered: bigint;
        totalReward: bigint;
        rank: bigint;
      }
    ],
    "view"
  >;

  rankRewards: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  rewardPools: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setRewardPool: TypedContractMethod<
    [leaderboardType: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sortLeaderboard: TypedContractMethod<
    [leaderboardType: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLeaderboard: TypedContractMethod<
    [leaderboardType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addUserToLeaderboard"
  ): TypedContractMethod<
    [leaderboardType: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "answerGame"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<[leaderboardType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [leaderboardType: BigNumberish, offset: BigNumberish, limit: BigNumberish],
    [Leaderboard.LeaderboardEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRank"
  ): TypedContractMethod<
    [leaderboardType: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "leaderboards"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        user: string;
        score: bigint;
        correctAnswers: bigint;
        totalAnswered: bigint;
        totalReward: bigint;
        rank: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rankRewards"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardPools"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRewardPool"
  ): TypedContractMethod<
    [leaderboardType: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sortLeaderboard"
  ): TypedContractMethod<[leaderboardType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLeaderboard"
  ): TypedContractMethod<[leaderboardType: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "LeaderboardUpdated"
  ): TypedContractEvent<
    LeaderboardUpdatedEvent.InputTuple,
    LeaderboardUpdatedEvent.OutputTuple,
    LeaderboardUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;

  filters: {
    "LeaderboardUpdated(uint8,uint256)": TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;
    LeaderboardUpdated: TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;

    "RewardsDistributed(uint8,address[],uint256[])": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
  };
}
