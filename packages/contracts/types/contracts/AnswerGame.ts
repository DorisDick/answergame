/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AnswerGame {
  export type QuestionStruct = {
    id: BigNumberish;
    questionText: string;
    options: string[];
    correctAnswer: BigNumberish;
    difficulty: BigNumberish;
    isActive: boolean;
  };

  export type QuestionStructOutput = [
    id: bigint,
    questionText: string,
    options: string[],
    correctAnswer: bigint,
    difficulty: bigint,
    isActive: boolean
  ] & {
    id: bigint;
    questionText: string;
    options: string[];
    correctAnswer: bigint;
    difficulty: bigint;
    isActive: boolean;
  };

  export type UserAnswerStruct = {
    questionId: BigNumberish;
    encryptedAnswer: BytesLike;
    encryptedIsCorrect: BytesLike;
    encryptedReward: BytesLike;
    isCorrect: boolean;
    timestamp: BigNumberish;
    reward: BigNumberish;
  };

  export type UserAnswerStructOutput = [
    questionId: bigint,
    encryptedAnswer: string,
    encryptedIsCorrect: string,
    encryptedReward: string,
    isCorrect: boolean,
    timestamp: bigint,
    reward: bigint
  ] & {
    questionId: bigint;
    encryptedAnswer: string;
    encryptedIsCorrect: string;
    encryptedReward: string;
    isCorrect: boolean;
    timestamp: bigint;
    reward: bigint;
  };

  export type UserStatsStruct = {
    totalAnswered: BigNumberish;
    correctAnswers: BigNumberish;
    totalReward: BigNumberish;
    dailyAnswers: BigNumberish;
    lastAnswerDate: BigNumberish;
  };

  export type UserStatsStructOutput = [
    totalAnswered: bigint,
    correctAnswers: bigint,
    totalReward: bigint,
    dailyAnswers: bigint,
    lastAnswerDate: bigint
  ] & {
    totalAnswered: bigint;
    correctAnswers: bigint;
    totalReward: bigint;
    dailyAnswers: bigint;
    lastAnswerDate: bigint;
  };
}

export interface AnswerGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAILY_ANSWER_LIMIT"
      | "REWARD_BASE"
      | "addQuestion"
      | "admin"
      | "answerToken"
      | "distributeReward"
      | "getEncryptedAnswer"
      | "getEncryptedResult"
      | "getQuestion"
      | "getRandomQuestions"
      | "getUserAnswers"
      | "getUserStats"
      | "leaderboard"
      | "protocolId"
      | "questionCount"
      | "questions"
      | "resetDailyLimit"
      | "setLeaderboard"
      | "submitAnswer"
      | "submitAnswerMock"
      | "updateAdmin"
      | "userAnswers"
      | "userStats"
      | "verifyAnswer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DailyLimitReset"
      | "QuestionAdded"
      | "QuestionAnswered"
      | "RewardClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DAILY_ANSWER_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addQuestion",
    values: [string, string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "answerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedAnswer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedResult",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomQuestions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAnswers",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "questionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetDailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLeaderboard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnswer",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnswerMock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAnswers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAnswer",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAILY_ANSWER_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "answerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "questionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnswerMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAnswer",
    data: BytesLike
  ): Result;
}

export namespace DailyLimitResetEvent {
  export type InputTuple = [user: AddressLike, newLimit: BigNumberish];
  export type OutputTuple = [user: string, newLimit: bigint];
  export interface OutputObject {
    user: string;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestionAddedEvent {
  export type InputTuple = [
    questionId: BigNumberish,
    questionText: string,
    difficulty: BigNumberish
  ];
  export type OutputTuple = [
    questionId: bigint,
    questionText: string,
    difficulty: bigint
  ];
  export interface OutputObject {
    questionId: bigint;
    questionText: string;
    difficulty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestionAnsweredEvent {
  export type InputTuple = [
    user: AddressLike,
    questionId: BigNumberish,
    isCorrect: boolean,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    questionId: bigint,
    isCorrect: boolean,
    reward: bigint
  ];
  export interface OutputObject {
    user: string;
    questionId: bigint;
    isCorrect: boolean;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnswerGame extends BaseContract {
  connect(runner?: ContractRunner | null): AnswerGame;
  waitForDeployment(): Promise<this>;

  interface: AnswerGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAILY_ANSWER_LIMIT: TypedContractMethod<[], [bigint], "view">;

  REWARD_BASE: TypedContractMethod<[], [bigint], "view">;

  addQuestion: TypedContractMethod<
    [
      questionText: string,
      options: string[],
      correctAnswer: BigNumberish,
      difficulty: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  answerToken: TypedContractMethod<[], [string], "view">;

  distributeReward: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEncryptedAnswer: TypedContractMethod<
    [user: AddressLike, answerIndex: BigNumberish],
    [string],
    "view"
  >;

  getEncryptedResult: TypedContractMethod<
    [user: AddressLike, answerIndex: BigNumberish],
    [
      [string, string] & { encryptedIsCorrect: string; encryptedReward: string }
    ],
    "view"
  >;

  getQuestion: TypedContractMethod<
    [questionId: BigNumberish],
    [AnswerGame.QuestionStructOutput],
    "view"
  >;

  getRandomQuestions: TypedContractMethod<
    [count: BigNumberish],
    [AnswerGame.QuestionStructOutput[]],
    "view"
  >;

  getUserAnswers: TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [AnswerGame.UserAnswerStructOutput[]],
    "view"
  >;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [AnswerGame.UserStatsStructOutput],
    "view"
  >;

  leaderboard: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  questionCount: TypedContractMethod<[], [bigint], "view">;

  questions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        questionText: string;
        correctAnswer: bigint;
        difficulty: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  resetDailyLimit: TypedContractMethod<[], [void], "nonpayable">;

  setLeaderboard: TypedContractMethod<
    [_leaderboard: AddressLike],
    [void],
    "nonpayable"
  >;

  submitAnswer: TypedContractMethod<
    [questionId: BigNumberish, encryptedAnswer: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  submitAnswerMock: TypedContractMethod<
    [questionId: BigNumberish, plaintextAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  userAnswers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, string, boolean, bigint, bigint] & {
        questionId: bigint;
        encryptedAnswer: string;
        encryptedIsCorrect: string;
        encryptedReward: string;
        isCorrect: boolean;
        timestamp: bigint;
        reward: bigint;
      }
    ],
    "view"
  >;

  userStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalAnswered: bigint;
        correctAnswers: bigint;
        totalReward: bigint;
        dailyAnswers: bigint;
        lastAnswerDate: bigint;
      }
    ],
    "view"
  >;

  verifyAnswer: TypedContractMethod<
    [answerIndex: BigNumberish, decryptedAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAILY_ANSWER_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addQuestion"
  ): TypedContractMethod<
    [
      questionText: string,
      options: string[],
      correctAnswer: BigNumberish,
      difficulty: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "answerToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedAnswer"
  ): TypedContractMethod<
    [user: AddressLike, answerIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedResult"
  ): TypedContractMethod<
    [user: AddressLike, answerIndex: BigNumberish],
    [
      [string, string] & { encryptedIsCorrect: string; encryptedReward: string }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuestion"
  ): TypedContractMethod<
    [questionId: BigNumberish],
    [AnswerGame.QuestionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomQuestions"
  ): TypedContractMethod<
    [count: BigNumberish],
    [AnswerGame.QuestionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAnswers"
  ): TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [AnswerGame.UserAnswerStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [AnswerGame.UserStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "leaderboard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "questionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        questionText: string;
        correctAnswer: bigint;
        difficulty: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resetDailyLimit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLeaderboard"
  ): TypedContractMethod<[_leaderboard: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitAnswer"
  ): TypedContractMethod<
    [questionId: BigNumberish, encryptedAnswer: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitAnswerMock"
  ): TypedContractMethod<
    [questionId: BigNumberish, plaintextAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAnswers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, string, boolean, bigint, bigint] & {
        questionId: bigint;
        encryptedAnswer: string;
        encryptedIsCorrect: string;
        encryptedReward: string;
        isCorrect: boolean;
        timestamp: bigint;
        reward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalAnswered: bigint;
        correctAnswers: bigint;
        totalReward: bigint;
        dailyAnswers: bigint;
        lastAnswerDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyAnswer"
  ): TypedContractMethod<
    [answerIndex: BigNumberish, decryptedAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DailyLimitReset"
  ): TypedContractEvent<
    DailyLimitResetEvent.InputTuple,
    DailyLimitResetEvent.OutputTuple,
    DailyLimitResetEvent.OutputObject
  >;
  getEvent(
    key: "QuestionAdded"
  ): TypedContractEvent<
    QuestionAddedEvent.InputTuple,
    QuestionAddedEvent.OutputTuple,
    QuestionAddedEvent.OutputObject
  >;
  getEvent(
    key: "QuestionAnswered"
  ): TypedContractEvent<
    QuestionAnsweredEvent.InputTuple,
    QuestionAnsweredEvent.OutputTuple,
    QuestionAnsweredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;

  filters: {
    "DailyLimitReset(address,uint256)": TypedContractEvent<
      DailyLimitResetEvent.InputTuple,
      DailyLimitResetEvent.OutputTuple,
      DailyLimitResetEvent.OutputObject
    >;
    DailyLimitReset: TypedContractEvent<
      DailyLimitResetEvent.InputTuple,
      DailyLimitResetEvent.OutputTuple,
      DailyLimitResetEvent.OutputObject
    >;

    "QuestionAdded(uint256,string,uint256)": TypedContractEvent<
      QuestionAddedEvent.InputTuple,
      QuestionAddedEvent.OutputTuple,
      QuestionAddedEvent.OutputObject
    >;
    QuestionAdded: TypedContractEvent<
      QuestionAddedEvent.InputTuple,
      QuestionAddedEvent.OutputTuple,
      QuestionAddedEvent.OutputObject
    >;

    "QuestionAnswered(address,uint256,bool,uint256)": TypedContractEvent<
      QuestionAnsweredEvent.InputTuple,
      QuestionAnsweredEvent.OutputTuple,
      QuestionAnsweredEvent.OutputObject
    >;
    QuestionAnswered: TypedContractEvent<
      QuestionAnsweredEvent.InputTuple,
      QuestionAnsweredEvent.OutputTuple,
      QuestionAnsweredEvent.OutputObject
    >;

    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
  };
}
